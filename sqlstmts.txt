//Datatypes in SQLite
Most SQL database engines (every SQL database engine other than SQLite, as far as we know) uses static, rigid typing. 
With static typing, the datatype of a value is determined by its container - the particular column in which the value 
is stored. SQLite uses a more general dynamic type system. In SQLite, the datatype of a value is associated with the 
value itself, not with its container. 
Each value stored in an SQLite database (or manipulated by the database engine) has one of the following storage classes:
NULL. The value is a NULL value.
INTEGER. The value is a signed integer, stored in 1, 2, 3, 4, 6, or 8 bytes depending on the magnitude of the value.
REAL. The value is a floating point value, stored as an 8-byte IEEE floating point number.
TEXT. The value is a text string, stored using the database encoding (UTF-8, UTF-16BE or UTF-16LE).
BLOB. The value is a blob of data, stored exactly as it was input.
A storage class is more general than a datatype. The INTEGER storage class, for example, includes 6 different integer 
datatypes of different lengths. This makes a difference on disk. But as soon as INTEGER values are read off of disk and 
into memory for processing, they are converted to the most general datatype (8-byte signed integer). And so for the most 
part, "storage class" is indistinguishable from "datatype" and the two terms can be used interchangeably.
SQLite does not have a separate Boolean storage class. Instead, Boolean values are stored as integers 0 (false) and 1 (true).
SQLite does not have a storage class set aside for storing dates and/or times. Instead, the built-in Date And Time Functions of SQLite are capable of storing dates and times as TEXT, REAL, or INTEGER values:

TEXT as ISO8601 strings ("YYYY-MM-DD HH:MM:SS.SSS").
REAL as Julian day numbers, the number of days since noon in Greenwich on November 24, 4714 B.C. according to the proleptic Gregorian calendar.
INTEGER as Unix Time, the number of seconds since 1970-01-01 00:00:00 UTC.








//drop
DROP TABLE IF EXISTS SCHEMA.TABLENAME;
$sql = 'DROP TABLE IF EXISTS '.$tablename.';';
The DROP TABLE statement removes a table added with the CREATE TABLE statement. 
The name specified is the table name. 
The dropped table is completely removed from the database schema and the disk file. 
The table can not be recovered. All indices and triggers associated with the table are also deleted.
The optional IF EXISTS clause suppresses the error that would normally result if the table does not exist.


